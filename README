
/*******************************************
 *   Copyright (C) 2022 by Ben F McLean    *
 *   drbenmclean@gmail.com                 *
 *                                         *
 ******************************************/

README:

This repo contains a computational chemistry project I programmed in C++. An experiment volume can be defined, any number of atoms with varying atomic number and mass can be created within this space, atoms can be given inner and outer-shell electrons, and the temperature of the experiment can be defined (which determines a normal distribution of initial velocities according to each atom's weight). The experiment is then run over a specified number and length of timesteps. Two key inter-atomic forces are modelled, specifically Coulomb force due to differing charges, and Pauli repulsion.

Ionic reactions are modelled directly, driven by the Coulomb forces generated by the differing ionic charges of the atoms. For modelling polar covalent reactions, in which atoms have different electronegativities and share electrons unequally, leading to polar bonds, I used a heuristic - electronegativity was simulated by giving the reaction constitutents a partial charge approximating the charge they would assume once covalently bonded, allowing for their attraction and bonding. This is a significant simplification to the quantum-mechanical process of polar covalent bonding, which depends on the overall reduction in energy of the system, but succeeds by replicating the end result of the much more complicated process for each atom. This project could be extended to more-closely simulate polar covalent bonding by modelling the electronegativity of each atom as an elastic tether, and modelling outer-shell electrons as teathered but mobile - allowing their movement within limits to simulate an uneven distribution of electron density.

One of the challenges of this project was accounting for repulsion between atoms at close distances, due to electron cloud overlap and the Pauli exclusion principle. Modelling this was necessary, as otherwise, atoms with differing electronegativity would attract indefinitely, until they occupied the same space. I modelled Pauli repulsion using an exponential function, which allows electrostatic forces due to the Coulomb effect to dominate at distances greater than a chosen equilibrium bond length (the distance between the nuclei of two bonded atoms), and for Pauli repulsion to rapidly increase at distances shorter than this bond length. This allows for atoms to move together and form an ionic or covalent bond, depending on the reactants, but remain realistically distinct. An alternate approach to this empirically-chosen equation might be to model the Lennard-Jones potential. Maybe another day!

**********************************

EXAMPLE:

The included compchem.cpp file compiles to an example experiment of burning carbon in oxygen, a polar covalent reaction. One run of this experiment has been saved as a video file (example_burning_carbon.mp4, imaged in Paraview, paraview.org), in which carbon (red) is burning in oxygen (blue). The colour of the atoms reflects electronegativity, and their size reflects their atomic weight. The simulation generated highly realistic output, spontaneously producing the correct reaction products. It mainly produced carbon dioxide, as expected for this reaction. However the simulation also produced the transient oxide carbon trioxide, which is unstable, and as shown in the simulation quickly decayed to carbon dioxide as soon as the appropriate atoms/molecules were available. The simulation also realistically produced the poisonous gas carbon monoxide, which is why we use rangehoods over gas stoves!

compile the program with
make re

If you have pvpython installed you can make and run the whole project, including building a video of your experiment, using
sh runproj.sh


